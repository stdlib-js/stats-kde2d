{
  "version": 3,
  "sources": ["../lib/stdev.js", "../lib/iqr.js", "../lib/pick_bandwidth.js", "../lib/gaussian.js", "../lib/epanechnikov.js", "../lib/cosine.js", "../lib/quartic.js", "../lib/triangular.js", "../lib/tricube.js", "../lib/triweight.js", "../lib/uniform.js", "../lib/kernels.js", "../lib/get_kernel.js", "../lib/validate.js", "../lib/ndarray_like.js", "../lib/min.js", "../lib/max.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the unbiased standard deviation.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column for which to calculate the standard deviation\n* @returns {number} standard deviation\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = stdev( arr, 1 );\n* // returns ~2.568\n*/\nfunction stdev( arr, j ) {\n\tvar delta;\n\tvar mean;\n\tvar M2;\n\tvar i;\n\tvar x;\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\n\tfor ( i = 0; i < arr.shape[0]; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tdelta = x - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn sqrt( M2 / ( i - 1 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = stdev;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n/**\n* Computes a quantile of the values in a numeric array.\n*\n* @private\n* @param {NumericArray} arr - sorted 1d array\n* @param {Probability} p - quantile prob [0,1]\n* @returns {number} quantile\n*/\nfunction quantile( arr, p ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar h;\n\th = ( ( len - 1.0 ) * p ) + 1.0;\n\tid = floor( h ) - 1.0;\n\treturn arr[ id ] + ( ( h - floor( h ) ) * ( arr[ id + 1 ] - arr[ id ] ) );\n}\n\n\n// MAIN //\n\n/**\n* Computes the inter-quartile range for a numeric array.\n*\n* @private\n* @param {NumericArray} data - ndarray like data\n* @param {number} j - column index for which to get the IQR\n* @returns {number} inter-quartile range\n*/\nfunction iqr( data, j ) {\n\t// Copy and sort data --> build X\n\tvar arr;\n\tvar i;\n\tarr = new Array( data.shape[0] );\n\tfor ( i = 0; i < data.shape[0]; i++ ) {\n\t\tarr[ i ] = data.get( i, j );\n\t}\n\tarr.sort( ascending );\n\treturn quantile( arr, 0.75 ) - quantile( arr, 0.25 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iqr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar EPSILON = require( '@stdlib/constants-float64-eps' );\nvar stdev = require( './stdev.js' );\nvar iqr = require( './iqr.js' );\n\n\n// MAIN //\n\n/**\n* Computes the rule-of-thumb bandwidth for the values in a column of `x`.\n*\n* @private\n* @param {ndarrayLike} arr - input ndarray\n* @param {number} j - index of the column from which to obtain the values\n* @returns {NumericArray} array with bandwidth values\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = pickBandwidth( arr, 1 );\n* // returns ~1.717\n*/\nfunction pickBandwidth( arr, j ) {\n\tvar minElement;\n\tvar sigmaHat;\n\tvar powTerm;\n\tvar iqrVal;\n\tvar out;\n\n\tiqrVal = iqr( arr, j ) / 1.34;\n\tsigmaHat = stdev( arr, j );\n\tminElement = min( iqrVal, sigmaHat );\n\tpowTerm = pow( arr.shape[ 0 ], -1/5 );\n\tout = 1.06 * powTerm * minElement;\n\tif ( out === 0 ) {\n\t\tout = EPSILON;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pickBandwidth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );\nvar exp = require( '@stdlib/math-base-special-exp' );\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO_PI = 1.0 / SQRT_TWO_PI;\n\n\n// MAIN //\n\n/**\n* Computes the Gaussian kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} the value for the Gaussian kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = gaussian( u );\n* // returns ~0.0\n*/\nfunction gaussian( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\treturn INV_SQRT_TWO_PI * exp( -0.5 * pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gaussian;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes the Epanechnikov kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Epanechnikov kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = epanechnikov( u );\n* // returns 0.0\n*/\nfunction epanechnikov( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.75 * ( 1.0 - pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = epanechnikov;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar FOURTH_PI = require( '@stdlib/constants-float64-fourth-pi' );\nvar HALF_PI = require( '@stdlib/constants-float64-half-pi' );\nvar cos = require( '@stdlib/math-base-special-cos' );\n\n\n// MAIN //\n\n/**\n* Computes the cosine kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the cosine kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* var out = cosine( u );\n* // returns 0.0\n*/\nfunction cosine( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn FOURTH_PI * cos( HALF_PI * u );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes the quartic kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 5;\n* var out = quartic(u);\n* // returns 0.0\n*/\nfunction quartic( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( 15.0 / 16.0 ) * pow( 1.0 - pow( u, 2.0 ), 2.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quartic;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the triangular kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = triangular( u );\n* // returns 0.8\n*/\nfunction triangular( u ) {\n\tvar absU;\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - absU;\n}\n\n\n// EXPORTS //\n\nmodule.exports = triangular;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// VARIABLES //\n\nvar LEADING_TERM = ( 70.0 / 81.0 );\n\n\n// MAIN //\n\n/**\n* Computes the tricube kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the tricube kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = tricube(u);\n* // returns 0.0\n*/\nfunction tricube( u ) {\n\tvar absU;\n\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn LEADING_TERM * pow( 1.0 - pow( absU, 3.0 ), 3.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = tricube;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes the Triweight kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Triweight kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = triweight( u );\n* // returns 0.0\n*/\nfunction triweight( u ) {\n\tvar absU;\n\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\n\tabsU = abs( u );\n\tif ( absU > 1 ) {\n\t\treturn 0;\n\t}\n\treturn ( 35 / 32 ) * pow( 1.0 - pow( u, 2.0 ), 3.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = triweight;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the uniform kernel.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = uniform( u );\n* // returns 0.5\n*/\nfunction uniform( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( u < 0.0 || u > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.5;\n}\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar gaussian = require( './gaussian.js' );\nvar epanechnikov = require( './epanechnikov.js' );\nvar cosine = require( './cosine.js' );\nvar quartic = require( './quartic.js' );\nvar triangular = require( './triangular.js' );\nvar tricube = require( './tricube.js' );\nvar triweight = require( './triweight.js' );\nvar uniform = require( './uniform.js' );\n\n\n// MAIN //\n\nvar kernels = {};\n\n// TODO: Make a stdlib/stats/base/kernels package\nkernels[ 'gaussian' ] = gaussian;\nkernels[ 'epanechnikov' ] = epanechnikov;\nkernels[ 'cosine' ] = cosine;\nkernels[ 'quartic' ] = quartic;\nkernels[ 'triangular' ] = triangular;\nkernels[ 'tricube' ] = tricube;\nkernels[ 'triweight' ] = triweight;\nkernels[ 'uniform' ] = uniform;\n\n\n// EXPORTS //\n\nmodule.exports = kernels;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar kernels = require( './kernels.js' );\n\n\n// MAIN //\n\n/**\n* Returns the specified kernel function.\n*\n* @private\n* @param {string} name - kernel name\n* @returns {(Function|Error)} kernel function or corresponding error\n*/\nfunction getKernel( name ) {\n\tvar kernel = kernels[ name ];\n\tif ( kernel === void 0 ) {\n\t\treturn new Error( format( 'invalid argument. Unsupported/unrecognized kernel. Value: `%s`.', name ) );\n\t}\n\treturn kernel;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getKernel;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isPositiveNumberArray = require( '@stdlib/assert-is-positive-number-array' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar getKernel = require( './get_kernel.js' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.n] - number of splits in the generated grid\n* @param {NumericArray} [options.h] - array of length two indicating the x and y bandwidth values\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.xMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel] - a string or function to specifying the used kernel function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'xMin': 3.14,\n*     'kernel': 'gaussian'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'h' ) ) {\n\t\topts.h = options.h;\n\t\tif ( !isPositiveNumberArray( opts.h) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of positive numbers. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t\tif ( opts.h.length !== 2 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of length two. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'n' ) ) {\n\t\topts.n = options.n;\n\t\tif ( !isPositiveInteger( opts.n ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'n', opts.n ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMax' ) ) {\n\t\topts.xMax = options.xMax;\n\t\tif ( !isNumber( opts.xMax ) || isnan( opts.xMax ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'xMax', opts.xMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMin' ) ) {\n\t\topts.xMin = options.xMin;\n\t\tif ( !isNumber( opts.xMin ) || isnan( opts.xMin ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'xMin', opts.xMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMax' ) ) {\n\t\topts.yMax = options.yMax;\n\t\tif ( !isNumber( opts.yMax ) || isnan( opts.yMax ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'yMax', opts.yMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMin' ) ) {\n\t\topts.yMin = options.yMin;\n\t\tif ( !isNumber( opts.yMin ) || isnan( opts.yMin ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'yMin', opts.yMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'kernel' ) ) {\n\t\topts.kernel = options.kernel;\n\t\tif ( isString( opts.kernel ) ) {\n\t\t\topts.kernel = getKernel( opts.kernel );\n\t\t\tif ( isError( opts.kernel ) ) {\n\t\t\t\treturn opts.kernel;\n\t\t\t}\n\t\t} else if ( !isFunction( opts.kernel ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string denoting a known kernel function or a custom function. Option: `%s`.', 'kernel', opts.kernel ) );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumericArray = require( '@stdlib/assert-is-numeric-array' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Converts two arrays .\n*\n* @private\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {RangeError} first and second arguments must have the same length\n* @returns {Object} object that mirrors an `ndarray`\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = ndarrayLike( x, y );\n*/\nfunction ndarrayLike( x, y ) {\n\tif ( !isNumericArray(x) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\n\tif ( !isNumericArray(y) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t}\n\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( 'invalid arguments. First and second arguments must have the same length.' );\n\t}\n\n\treturn {\n\t\t'get': get,\n\t\t'shape': [ x.length, 2 ]\n\t};\n\n\t/**\n\t* Gets an element of an nd-array-like object .\n\t*\n\t* @private\n\t* @param {number} i - row index\n\t* @param {number} j - column index\n\t* @returns {number} number stored in row i and column j\n\t*/\n\tfunction get( i, j ) {\n\t\tif ( j === 0 ) {\n\t\t\treturn x[ i ];\n\t\t}\n\t\treturn y[ i ];\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ndarrayLike;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the range\n* @param {number} len - number of rows in arr\n* @returns {number} minimum value\n*/\nfunction min( arr, j, len ) {\n\tvar minObs;\n\tvar x;\n\tvar i;\n\n\tminObs = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x < minObs ) {\n\t\t\tminObs = x;\n\t\t}\n\t}\n\treturn minObs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = min;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the maximum\n* @param {number} len - number of rows in arr\n* @returns {number} maximum value\n*/\nfunction max( arr, j, len ) {\n\tvar max;\n\tvar x;\n\tvar i;\n\n\tmax = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray = require( '@stdlib/ndarray-array' );\nvar linspace = require( '@stdlib/array-base-linspace' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isNumericArray = require( '@stdlib/assert-is-numeric-array' );\nvar isMatrixLike = require( '@stdlib/assert-is-matrix-like' );\nvar format = require( '@stdlib/string-format' );\nvar pickBandwidth = require( './pick_bandwidth.js' );\nvar validate = require( './validate.js' );\nvar ndarrayLike = require( './ndarray_like.js' );\nvar min = require( './min.js' );\nvar max = require( './max.js' );\nvar gaussian = require( './gaussian.js' );\n\n\n// MAIN //\n\n/**\n* Computes two-dimensional kernel density estimates.\n*\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @param {Options} [options] - function options\n* @param {NumericArray} [options.h] - array of length two containing the bandwidth values for x and y\n* @param {number} [options.n=25] - number of partitions on the x- and y-axes\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.yMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel='gaussian'] - a string or function to specifying the used kernel function\n* @throws {TypeError} first argument must be an array or matrix-like\n* @throws {TypeError} second argument must be an array\n* @throws {Error} first and second arguments must have the same length\n* @throws {RangeError} `xMin` must be less than `xMax`\n* @throws {RangeError} `yMin` must be less than `yMax`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} object containing the density estimates (`z`) along grid points (`x` and `y` values)\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = kde2d( x, y );\n*/\nfunction kde2d() {\n\tvar kernelFunction;\n\tvar maxArgs;\n\tvar zScoreX;\n\tvar zScoreY;\n\tvar gridX;\n\tvar gridY;\n\tvar xMin;\n\tvar xMax;\n\tvar yMin;\n\tvar yMax;\n\tvar xVal; // For gridspace loop\n\tvar yVal; // For gridspace loop\n\tvar subX;\n\tvar subY;\n\tvar opts;\n\tvar arr;\n\tvar err;\n\tvar ans;\n\tvar out;\n\tvar gx;\n\tvar gy;\n\tvar hX;\n\tvar hY;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\topts = {};\n\n\tif ( isMatrixLike( arguments[0] ) ) {\n\t\t// Case of ndarray, opts\n\t\tarr = arguments[ 0 ];\n\t\tmaxArgs = 1;\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\ty = arguments[ 1 ];\n\t\tif ( !isNumericArray( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isNumericArray( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( x.length !== y.length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. First and second arguments must be arrays having the same length.' );\n\t\t}\n\t\tarr = ndarrayLike( x, y );\n\t\tmaxArgs = 2;\n\t}\n\tif ( arguments.length > maxArgs ) {\n\t\terr = validate( opts, arguments[ maxArgs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.h ) {\n\t\thX = opts.h[0];\n\t\thY = opts.h[1];\n\t} else {\n\t\thX = pickBandwidth( arr, 0 );\n\t\thY = pickBandwidth( arr, 1 );\n\t}\n\tn = opts.n || 25;\n\txMin = opts.xMin || min( arr, 0, arr.shape[0] );\n\txMax = opts.xMax || max( arr, 0, arr.shape[0] );\n\tyMin = opts.yMin || min( arr, 1, arr.shape[0] );\n\tyMax = opts.yMax || max( arr, 1, arr.shape[0] );\n\n\tif ( xMin >= xMax ) {\n\t\tthrow new RangeError( format( 'invalid option. Lower bound `%s` must be strictly less than the upper bound `%s`.', 'xMin', 'xMax' ) );\n\t}\n\tif ( yMin >= yMax ) {\n\t\tthrow new RangeError( format( 'invalid option. Lower bound `%s` must be strictly less than the upper bound `%s`.', 'yMin', 'yMax' ) );\n\t}\n\n\tkernelFunction = opts.kernel || gaussian;\n\n\t// Create the `ndarray` to hold the density values:\n\tz = ndarray({\n\t\t'shape': [ n, n ]\n\t} );\n\n\t// Make the grid:\n\tgridX = linspace( xMin, xMax, n );\n\tgridY = linspace( yMin, yMax, n );\n\n\t// Loop through x and y indices:\n\tfor ( ix = 0; ix < gridX.length; ix++ ) {\n\t\tgx = gridX[ ix ];\n\t\tfor ( iy = 0; iy < gridY.length; iy++ ) {\n\t\t\tgy = gridY[ iy ];\n\t\t\tans = 0.0;\n\t\t\tfor ( i = 0; i < arr.shape[ 0 ]; i++ ) {\n\t\t\t\txVal = arr.get( i, 0 );\n\t\t\t\tyVal = arr.get( i, 1 );\n\n\t\t\t\tzScoreX = ( (xVal - gx) / hX );\n\t\t\t\tzScoreY = ( (yVal - gy) / hY );\n\n\t\t\t\tsubX = ( 1.0 / hX ) * kernelFunction( zScoreX );\n\t\t\t\tsubY = ( 1.0 / hY ) * kernelFunction( zScoreY );\n\t\t\t\tans += ( subX * subY );\n\t\t\t}\n\t\t\tz.set( ix, iy, ans / arr.shape[0] );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'x', gridX );\n\tsetReadOnly( out, 'y', gridY );\n\tsetReadOnly( out, 'z', z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kde2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Two-dimensional kernel density estimation.\n*\n* @module @stdlib/stats-kde2d\n*\n* @example\n* var kde2d = require( '@stdlib/stats-kde2d' );\n* var x = [ 1, 3, 5, 6, 21, 23, 16, 17, 20, 10 ];\n* var y = [ 0.40, 0.20, 0.20, 0.15, 0.05, 0.55, 0.6, 0.33, 0.8, 0.41 ];\n*\n* var out = kde2d( x, y );\n* // returns { 'x': [1, 1.91, ... ], 'y': [0.05, 0.08125, ...], 'z': ndarray {Float64Array[ 0.031, ...] }\n*/\n\n// MODULES //\n\nvar kde2d = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kde2d;\n"],
  "mappings": "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",
  "names": ["require_stdev", "__commonJSMin", "exports", "module", "sqrt", "stdev", "arr", "j", "delta", "mean", "M2", "i", "x", "require_iqr", "__commonJSMin", "exports", "module", "floor", "ascending", "a", "b", "quantile", "arr", "p", "len", "id", "h", "iqr", "data", "j", "require_pick_bandwidth", "__commonJSMin", "exports", "module", "pow", "min", "EPSILON", "stdev", "iqr", "pickBandwidth", "arr", "j", "minElement", "sigmaHat", "powTerm", "iqrVal", "out", "require_gaussian", "__commonJSMin", "exports", "module", "isnan", "pow", "SQRT_TWO_PI", "exp", "INV_SQRT_TWO_PI", "gaussian", "u", "require_epanechnikov", "__commonJSMin", "exports", "module", "abs", "isnan", "pow", "epanechnikov", "u", "require_cosine", "__commonJSMin", "exports", "module", "abs", "isnan", "FOURTH_PI", "HALF_PI", "cos", "cosine", "u", "require_quartic", "__commonJSMin", "exports", "module", "abs", "isnan", "pow", "quartic", "u", "require_triangular", "__commonJSMin", "exports", "module", "abs", "isnan", "triangular", "u", "absU", "require_tricube", "__commonJSMin", "exports", "module", "abs", "isnan", "pow", "LEADING_TERM", "tricube", "u", "absU", "require_triweight", "__commonJSMin", "exports", "module", "abs", "isnan", "pow", "triweight", "u", "absU", "require_uniform", "__commonJSMin", "exports", "module", "isnan", "uniform", "u", "require_kernels", "__commonJSMin", "exports", "module", "gaussian", "epanechnikov", "cosine", "quartic", "triangular", "tricube", "triweight", "uniform", "kernels", "require_get_kernel", "__commonJSMin", "exports", "module", "format", "kernels", "getKernel", "name", "kernel", "require_validate", "__commonJSMin", "exports", "module", "isString", "hasOwnProp", "isObject", "isPositiveInteger", "isPositiveNumberArray", "isFunction", "isError", "isNumber", "format", "isnan", "getKernel", "validate", "opts", "options", "require_ndarray_like", "__commonJSMin", "exports", "module", "isNumericArray", "format", "ndarrayLike", "x", "y", "get", "j", "require_min", "__commonJSMin", "exports", "module", "min", "arr", "j", "len", "minObs", "x", "i", "require_max", "__commonJSMin", "exports", "module", "max", "arr", "j", "len", "x", "i", "require_main", "__commonJSMin", "exports", "module", "ndarray", "linspace", "setReadOnly", "isNumericArray", "isMatrixLike", "format", "pickBandwidth", "validate", "ndarrayLike", "min", "max", "gaussian", "kde2d", "kernelFunction", "maxArgs", "zScoreX", "zScoreY", "gridX", "gridY", "xMin", "xMax", "yMin", "yMax", "xVal", "yVal", "subX", "subY", "opts", "arr", "err", "ans", "out", "gx", "gy", "hX", "hY", "ix", "iy", "y", "i", "n", "z", "kde2d"]
}
