{"version":3,"file":"index.mjs","sources":["../lib/stdev.js","../lib/iqr.js","../lib/pick_bandwidth.js","../lib/gaussian.js","../lib/epanechnikov.js","../lib/cosine.js","../lib/quartic.js","../lib/triangular.js","../lib/tricube.js","../lib/triweight.js","../lib/uniform.js","../lib/kernels.js","../lib/get_kernel.js","../lib/validate.js","../lib/ndarray_like.js","../lib/max.js","../lib/kde2d.js","../lib/min.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the unbiased standard deviation.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column for which to calculate the standard deviation\n* @returns {number} standard deviation\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = stdev( arr, 1 );\n* // returns ~2.568\n*/\nfunction stdev( arr, j ) {\n\tvar delta;\n\tvar mean;\n\tvar M2;\n\tvar i;\n\tvar x;\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\n\tfor ( i = 0; i < arr.shape[0]; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tdelta = x - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn sqrt( M2 / ( i - 1 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n/**\n* Computes a quantile of the values in a numeric array.\n*\n* @private\n* @param {NumericArray} arr - sorted 1d array\n* @param {Probability} p - quantile prob [0,1]\n* @returns {number} quantile\n*/\nfunction quantile( arr, p ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar h;\n\th = ( ( len - 1.0 ) * p ) + 1.0;\n\tid = floor( h ) - 1.0;\n\treturn arr[ id ] + ( ( h - floor( h ) ) * ( arr[ id + 1 ] - arr[ id ] ) );\n}\n\n\n// MAIN //\n\n/**\n* Computes the inter-quartile range for a numeric array.\n*\n* @private\n* @param {NumericArray} data - ndarray like data\n* @param {number} j - column index for which to get the IQR\n* @returns {number} inter-quartile range\n*/\nfunction iqr( data, j ) {\n\t// Copy and sort data --> build X\n\tvar arr;\n\tvar i;\n\tarr = new Array( data.shape[0] );\n\tfor ( i = 0; i < data.shape[0]; i++ ) {\n\t\tarr[ i ] = data.get( i, j );\n\t}\n\tarr.sort( ascending );\n\treturn quantile( arr, 0.75 ) - quantile( arr, 0.25 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iqr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar EPSILON = require( '@stdlib/constants-float64-eps' );\nvar stdev = require( './stdev.js' );\nvar iqr = require( './iqr.js' );\n\n\n// MAIN //\n\n/**\n* Computes the rule-of-thumb bandwidth for the values in a column of `x`.\n*\n* @private\n* @param {ndarrayLike} arr - input ndarray\n* @param {number} j - index of the column from which to obtain the values\n* @returns {NumericArray} array with bandwidth values\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = pickBandwidth( arr, 1 );\n* // returns ~1.717\n*/\nfunction pickBandwidth( arr, j ) {\n\tvar minElement;\n\tvar sigmaHat;\n\tvar powTerm;\n\tvar iqrVal;\n\tvar out;\n\n\tiqrVal = iqr( arr, j ) / 1.34;\n\tsigmaHat = stdev( arr, j );\n\tminElement = min( iqrVal, sigmaHat );\n\tpowTerm = pow( arr.shape[ 0 ], -1/5 );\n\tout = 1.06 * powTerm * minElement;\n\tif ( out === 0 ) {\n\t\tout = EPSILON;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pickBandwidth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );\nvar exp = require( '@stdlib/math-base-special-exp' );\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO_PI = 1.0 / SQRT_TWO_PI;\n\n\n// MAIN //\n\n/**\n* Computes the Gaussian kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} the value for the Gaussian kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = gaussian( u );\n* // returns ~0.0\n*/\nfunction gaussian( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\treturn INV_SQRT_TWO_PI * exp( -0.5 * pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gaussian;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes the Epanechnikov kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Epanechnikov kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = epanechnikov( u );\n* // returns 0.0\n*/\nfunction epanechnikov(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.75 * ( 1.0 - pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = epanechnikov;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar FOURTH_PI = require( '@stdlib/constants-float64-fourth-pi' );\nvar HALF_PI = require( '@stdlib/constants-float64-half-pi' );\nvar cos = require( '@stdlib/math-base-special-cos' );\n\n\n// MAIN //\n\n/**\n* Computes the cosine kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the cosine kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* var out = cosine( u );\n* // returns 0\n*/\nfunction cosine(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn FOURTH_PI * cos( HALF_PI * u );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes the quartic kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 5;\n* var out = quartic(u);\n* // returns 0\n*/\nfunction quartic( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( 15.0 / 16.0 ) * pow( 1.0 - pow( u, 2.0 ), 2.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quartic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the triangular kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = triangular( u );\n* // returns 0.8\n*/\nfunction triangular( u ) {\n\tvar absU;\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - absU;\n}\n\n\n// EXPORTS //\n\nmodule.exports = triangular;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// VARIABLES //\n\nvar LEADING_TERM = ( 70.0 / 81.0 );\n\n\n// MAIN //\n\n/**\n* Computes the tricube kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the tricube kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = tricube(u);\n* // returns 0\n*/\nfunction tricube(u) {\n\tvar absU;\n\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn LEADING_TERM * pow( 1.0 - pow( absU, 3.0 ), 3.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = tricube;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes the Triweight kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Triweight kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = triweight(u); // returns 0\n*/\nfunction triweight(u) {\n\tvar absU;\n\n\tif (isnan(u)) {\n\t\treturn NaN;\n\t}\n\n\tabsU = abs(u);\n\tif (absU > 1) {\n\t\treturn 0;\n\t}\n\treturn (35 / 32) * pow(1.0 - pow(u, 2.0), 3.0);\n}\n\n\n// EXPORTS //\n\nmodule.exports = triweight;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the uniform kernel.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = uniform( u );\n* // returns 0.5\n*/\nfunction uniform(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( u < 0.0 || u > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.5;\n}\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MAIN //\n\nvar kernels = {};\n\n// Make a stdlib/stats/base/kernels package\nkernels[ 'gaussian' ] = require( './gaussian.js' );\nkernels[ 'epanechnikov' ] = require( './epanechnikov.js' );\nkernels[ 'cosine' ] = require( './cosine.js' );\nkernels[ 'quartic' ] = require( './quartic.js' );\nkernels[ 'triangular' ] = require( './triangular.js' );\nkernels[ 'tricube' ] = require( './tricube.js' );\nkernels[ 'triweight' ] = require( './triweight.js' );\nkernels[ 'uniform' ] = require( './uniform.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kernels;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar kernels = require( './kernels.js' );\n\n\n// MAIN //\n\n/**\n* Returns the specified kernel function.\n*\n* @private\n* @param {string} name - kernel name\n* @returns {(Function|Error)} kernel function or corresponding error\n*/\nfunction getKernel( name ) {\n\tvar kernel = kernels[ name ];\n\tif ( kernel === void 0 ) {\n\t\treturn new Error( format( 'invalid argument. Unsupported/unrecognized kernel. Value: `%s`.', name ) );\n\t}\n\treturn kernel;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getKernel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isPositiveNumberArray = require( '@stdlib/assert-is-positive-number-array' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar getKernel = require( './get_kernel.js' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.n] - number of splits in the generated grid\n* @param {NumericArray} [options.h] - array of length two indicating the x and y bandwidth values\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.xMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel] - a string or function to specifying the used kernel function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'xMin': 3.14,\n*     'kernel': 'gaussian'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'h' ) ) {\n\t\topts.h = options.h;\n\t\tif ( !isPositiveNumberArray( opts.h) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be an array of positive values. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t\tif ( opts.h.length !== 2 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be an array of length two. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'n' ) ) {\n\t\topts.n = options.n;\n\t\tif ( !isPositiveInteger( opts.n ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'n', opts.n ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMax' ) ) {\n\t\topts.xMax = options.xMax;\n\t\tif ( !isNumber( opts.xMax ) || isnan( opts.xMax ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'xMax', opts.xMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMin' ) ) {\n\t\topts.xMin = options.xMin;\n\t\tif ( !isNumber( opts.xMin ) || isnan( opts.xMin ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'xMin', opts.xMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMax' ) ) {\n\t\topts.yMax = options.yMax;\n\t\tif ( !isNumber( opts.yMax ) || isnan( opts.yMax ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'yMax', opts.yMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMin' ) ) {\n\t\topts.yMin = options.yMin;\n\t\tif ( !isNumber( opts.yMin ) || isnan( opts.yMin ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'yMin', opts.yMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'kernel' ) ) {\n\t\topts.kernel = options.kernel;\n\t\tif ( isString( opts.kernel ) ) {\n\t\t\topts.kernel = getKernel( opts.kernel );\n\t\t\tif ( isError( opts.kernel ) ) {\n\t\t\t\treturn opts.kernel;\n\t\t\t}\n\t\t} else if ( !isFunction( opts.kernel ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a string denoting a known kernel function or a custom function. Option: `%s`.', 'kernel', opts.kernel ) );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumericArray = require( '@stdlib/assert-is-numeric-array' );\n\n\n// MAIN //\n\n/**\n* Converts two arrays .\n*\n* @private\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {Error} first and second arguments must be of the same length\n* @returns {Object} object that mirrors an `ndarray`\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = ndarrayLike( x, y );\n*/\nfunction ndarrayLike( x, y ) {\n\tif ( !isNumericArray(x) ) {\n\t\tthrow new TypeError( 'First argument must be a numeric array' );\n\t}\n\n\tif ( !isNumericArray(y) ) {\n\t\tthrow new TypeError( 'Second argument must be a numeric array' );\n\t}\n\n\tif ( x.length !== y.length ) {\n\t\tthrow new Error( 'First and second argument must be of same length' );\n\t}\n\n\treturn {\n\t\t'get': get,\n\t\t'shape': [ x.length, 2 ]\n\t};\n\n\t/**\n\t* Gets an element of an nd-array-like object .\n\t*\n\t* @private\n\t* @param {number} i - row index\n\t* @param {number} j - column index\n\t* @returns {number} number stored in row i and column j\n\t*/\n\tfunction get( i, j ) {\n\t\tif ( j === 0 ) {\n\t\t\treturn x[ i ];\n\t\t}\n\t\treturn y[ i ];\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ndarrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the maximum\n* @param {number} len - number of rows in arr\n* @returns {number} maximum value\n*/\nfunction max( arr, j, len ) {\n\tvar max;\n\tvar x;\n\tvar i;\n\n\tmax = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray = require( '@stdlib/ndarray-array' );\nvar linspace = require( '@stdlib/array-base-linspace' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isNumericArray = require( '@stdlib/assert-is-numeric-array' );\nvar isMatrixLike = require( '@stdlib/assert-is-matrix-like' );\nvar format = require( '@stdlib/string-format' );\nvar pickBandwidth = require( './pick_bandwidth.js' );\nvar validate = require( './validate.js' );\nvar ndarrayLike = require( './ndarray_like.js' );\nvar min = require( './min.js' );\nvar max = require( './max.js' );\nvar gaussian = require( './gaussian.js' );\n\n\n// MAIN //\n\n/**\n* Computes two-dimensional kernel density estimates.\n*\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @param {Options} [options] - function options\n* @param {NumericArray} [options.h] - array of length two containing the bandwidth values for x and y\n* @param {number} [options.n=25] - number of partitions on the x- and y-axes\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.yMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel='gaussian'] - a string or function to specifying the used kernel function\n* @throws {TypeError} first argument must be an array or matrix-like\n* @throws {TypeError} second argument must be an array\n* @throws {Error} first and second arguments must be of the same length\n* @throws {RangeError} `xMin` must be less than `xMax`\n* @throws {RangeError} `yMin` must be less than `yMax`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} object containing the density estimates (`z`) along grid points (`x` and `y` values)\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = kde2d( x, y );\n*/\nfunction kde2d() {\n\tvar kernelFunction;\n\tvar maxArgs;\n\tvar zScoreX;\n\tvar zScoreY;\n\tvar gridX;\n\tvar gridY;\n\tvar xMin;\n\tvar xMax;\n\tvar yMin;\n\tvar yMax;\n\tvar xVal; // For gridspace loop\n\tvar yVal; // For gridspace loop\n\tvar subX;\n\tvar subY;\n\tvar opts;\n\tvar arr;\n\tvar err;\n\tvar ans;\n\tvar out;\n\tvar gx;\n\tvar gy;\n\tvar hX;\n\tvar hY;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\topts = {};\n\n\tif ( isMatrixLike( arguments[0] ) ) {\n\t\t// Case of ndarray, opts\n\t\tarr = arguments[ 0 ];\n\t\tmaxArgs = 1;\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\ty = arguments[ 1 ];\n\t\tif ( !isNumericArray( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isNumericArray( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( x.length !== y.length ) {\n\t\t\tthrow new Error( 'invalid arguments. Arguments `x` and `y` must be arrays of the same length' );\n\t\t}\n\t\tarr = ndarrayLike( x, y );\n\t\tmaxArgs = 2;\n\t}\n\tif ( arguments.length > maxArgs ) {\n\t\terr = validate( opts, arguments[ maxArgs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.h ) {\n\t\thX = opts.h[0];\n\t\thY = opts.h[1];\n\t} else {\n\t\thX = pickBandwidth( arr, 0 );\n\t\thY = pickBandwidth( arr, 1 );\n\t}\n\tn = opts.n || 25;\n\txMin = opts.xMin || min( arr, 0, arr.shape[0] );\n\txMax = opts.xMax || max( arr, 0, arr.shape[0] );\n\tyMin = opts.yMin || min( arr, 1, arr.shape[0] );\n\tyMax = opts.yMax || max( arr, 1, arr.shape[0] );\n\n\tif ( xMin >= xMax ) {\n\t\tthrow new RangeError( '`x` min must be strictly less than max' );\n\t}\n\tif ( yMin >= yMax ) {\n\t\tthrow new RangeError( '`y` min must be strictly less than max' );\n\t}\n\n\tkernelFunction = opts.kernel || gaussian;\n\n\t// Create the `ndarray` to hold the density values:\n\tz = ndarray({\n\t\t'shape': [ n, n ]\n\t} );\n\n\t// Make the grid:\n\tgridX = linspace( xMin, xMax, n );\n\tgridY = linspace( yMin, yMax, n );\n\n\t// Loop through x and y indices:\n\tfor ( ix = 0; ix < gridX.length; ix++ ) {\n\t\tgx = gridX[ ix ];\n\t\tfor ( iy = 0; iy < gridY.length; iy++ ) {\n\t\t\tgy = gridY[ iy ];\n\t\t\tans = 0.0;\n\t\t\tfor ( i = 0; i < arr.shape[ 0 ]; i++ ) {\n\t\t\t\txVal = arr.get( i, 0 );\n\t\t\t\tyVal = arr.get( i, 1 );\n\n\t\t\t\tzScoreX = ( (xVal - gx) / hX );\n\t\t\t\tzScoreY = ( (yVal - gy) / hY );\n\n\t\t\t\tsubX = ( 1.0 / hX ) * kernelFunction( zScoreX );\n\t\t\t\tsubY = ( 1.0 / hY ) * kernelFunction( zScoreY );\n\t\t\t\tans += ( subX * subY );\n\t\t\t}\n\t\t\tz.set( ix, iy, ans / arr.shape[0] );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'x', gridX );\n\tsetReadOnly( out, 'y', gridY );\n\tsetReadOnly( out, 'z', z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kde2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the range\n* @param {number} len - number of rows in arr\n* @returns {number} minimum value\n*/\nfunction min( arr, j, len ) {\n\tvar minObs;\n\tvar x;\n\tvar i;\n\n\tminObs = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x < minObs ) {\n\t\t\tminObs = x;\n\t\t}\n\t}\n\treturn minObs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Two-dimensional kernel density estimation.\n*\n* @module @stdlib/stats-kde2d\n*\n* @example\n* var kde2d = require( '@stdlib/stats-kde2d' );\n* var x = [ 1, 3, 5, 6, 21, 23, 16, 17, 20, 10 ];\n* var y = [ 0.40, 0.20, 0.20, 0.15, 0.05, 0.55, 0.6, 0.33, 0.8, 0.41 ];\n*\n* var out = kde2d( x, y );\n* // returns { 'x': [1, 1.91, ... ], 'y': [0.05, 0.08125, ...], 'z': ndarray {Float64Array[ 0.031, ...] }\n*/\n\n// MODULES //\n\nvar kde2d = require( './kde2d.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kde2d;\n"],"names":["sqrt","require$$0","floor","ascending","a","b","quantile","arr","p","id","h","len","length","pow","min","require$$1","EPSILON","require$$2","stdev","j","delta","mean","M2","i","x","shape","get","iqr","data","Array","sort","pick_bandwidth","minElement","sigmaHat","iqrVal","out","isnan","exp","require$$3","INV_SQRT_TWO_PI","gaussian_1","u","NaN","abs","epanechnikov_1","FOURTH_PI","HALF_PI","cos","require$$4","cosine_1","quartic_1","triangular_1","absU","tricube_1","triweight_1","uniform_1","kernels","require$$5","require$$6","require$$7","format","get_kernel","name","kernel","Error","isString","hasOwnProp","isObject","isPositiveInteger","isPositiveNumberArray","isFunction","isError","isNumber","isPrimitive","require$$8","require$$9","getKernel","require$$10","isNumericArray","max_1","max","ndarray","linspace","setReadOnly","isMatrixLike","pickBandwidth","validate","opts","options","TypeError","n","xMax","xMin","yMax","yMin","ndarrayLike","y","minObs","gaussian","require$$11","lib","kernelFunction","maxArgs","zScoreY","gridX","gridY","xVal","err","ans","gx","gy","hX","hY","ix","iy","z","arguments","RangeError","set"],"mappings":";;gxEAsBA,IAAIA,EAAOC,EA4CX,IC5CIC,EAAQD,EAaZ,SAASE,EAAWC,EAAGC,GACtB,OAAOD,EAAIC,EAWZ,SAASC,EAAUC,EAAKC,GACvB,IACIC,EACAC,EAFAC,EAAMJ,EAAIK,OAKd,OAAOL,EADPE,EAAKP,EADLQ,GAAQC,EAAM,GAAQH,EAAM,GACV,IACKE,EAAIR,EAAOQ,KAAUH,EAAKE,EAAK,GAAMF,EAAKE,IA6BlE,IC5DII,EAAMZ,EACNa,EAAMC,EACNC,EAAUC,EACVC,EFmBJ,SAAgBX,EAAKY,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAJAJ,EAAQ,EACRC,EAAO,EACPC,EAAK,EAECC,EAAI,EAAGA,EAAIhB,EAAIkB,MAAM,GAAIF,IAI9BD,IAFAF,GADAI,EAAIjB,EAAImB,IAAKH,EAAGJ,IACJE,IAEIG,GADhBH,GAAQD,GAAUG,EAAE,KAGrB,OAAOvB,EAAMsB,GAAOC,EAAI,KElCrBI,EDyCJ,SAAcC,EAAMT,GAEnB,IAAIZ,EACAgB,EAEJ,IADAhB,EAAM,IAAIsB,MAAOD,EAAKH,MAAM,IACtBF,EAAI,EAAGA,EAAIK,EAAKH,MAAM,GAAIF,IAC/BhB,EAAKgB,GAAMK,EAAKF,IAAKH,EAAGJ,GAGzB,OADAZ,EAAIuB,KAAM3B,GACHG,EAAUC,EAAK,KAASD,EAAUC,EAAK,MCP/C,IAAAwB,EArBA,SAAwBxB,EAAKY,GAC5B,IAAIa,EACAC,EAEAC,EACAC,EAUJ,OARAD,EAASP,EAAKpB,EAAKY,GAAM,KACzBc,EAAWf,EAAOX,EAAKY,GACvBa,EAAalB,EAAKoB,EAAQD,GAGb,KADbE,EAAM,KADItB,EAAKN,EAAIkB,MAAO,IAAK,IACRO,KAEtBG,EAAMnB,GAEAmB,GCzCJC,EAAQnC,EACRY,EAAME,EAENsB,EAAMC,EAKNC,EAAkB,EANJtB,EAiClB,IAAAuB,EAVA,SAAmBC,GAClB,OAAKL,EAAOK,GACJC,IAEDH,EAAkBF,GAAM,GAAMxB,EAAK4B,EAAG,KC7B1CE,EAAM1C,EACNmC,EAAQrB,EACRF,EAAMI,EA8BV,IAAA2B,EAbA,SAAsBH,GACrB,OAAKL,EAAOK,GACJC,IAEHC,EAAKF,GAAM,EACR,EAED,KAAS,EAAM5B,EAAK4B,EAAG,KC1B3BE,EAAM1C,EACNmC,EAAQrB,EACR8B,EAAY5B,EACZ6B,EAAUR,EACVS,EAAMC,EA8BV,IAAAC,EAbA,SAAgBR,GACf,OAAKL,EAAOK,GACJC,IAEHC,EAAKF,GAAM,EACR,EAEDI,EAAYE,EAAKD,EAAUL,IC5B/BE,EAAM1C,EACNmC,EAAQrB,EACRF,EAAMI,EA8BV,IAAAiC,GAbA,SAAkBT,GACjB,OAAKL,EAAOK,GACJC,IAEHC,EAAKF,GAAM,EACR,EAEC,GAAO,GAAS5B,EAAK,EAAMA,EAAK4B,EAAG,GAAO,IC1BhDE,GAAM1C,EACNmC,GAAQrB,EAgCZ,IAAAoC,GAfA,SAAqBV,GACpB,IAAIW,EACJ,OAAKhB,GAAOK,GACJC,KAERU,EAAOT,GAAKF,IACA,EACJ,EAED,EAAMW,GC3BVT,GAAM1C,EACNmC,GAAQrB,EACRF,GAAMI,EAsCV,IAAAoC,GAhBA,SAAiBZ,GAChB,IAAIW,EAEJ,OAAKhB,GAAOK,GACJC,KAERU,EAAOT,GAAKF,IACA,EACJ,EAzBY,kBA2BE5B,GAAK,EAAMA,GAAKuC,EAAM,GAAO,IClChDT,GAAM1C,EACNmC,GAAQrB,EACRF,GAAMI,EAiCV,IAAAqC,GAjBA,SAAmBb,GAGlB,OAAIL,GAAMK,GACFC,IAGDC,GAAIF,GACA,EACH,EAEA,GAAK,GAAM5B,GAAI,EAAMA,GAAI4B,EAAG,GAAM,IC7BvCL,GAAQnC,EA8BZ,IAAAsD,GAbA,SAAiBd,GAChB,OAAKL,GAAOK,GACJC,IAEHD,EAAI,GAAOA,EAAI,EACZ,EAED,ICpBJe,GAAU,GAGdA,GAAqB,SAAGvD,EACxBuD,GAAyB,aAAGzC,EAC5ByC,GAAmB,OAAGvC,EACtBuC,GAAoB,QAAGlB,GACvBkB,GAAuB,WAAGR,GAC1BQ,GAAoB,QAAGC,GACvBD,GAAsB,UAAGE,GACzBF,GAAoB,QAAGG,GAKvB,ICnBIC,GAAS3D,EACTuD,GDkBaA,GCKjB,IAAAK,GAXA,SAAoBC,GACnB,IAAIC,EAASP,GAASM,GACtB,YAAgB,IAAXC,EACG,IAAIC,MAAOJ,GAAQ,kEAAmEE,IAEvFC,GClBJE,GAAWhE,EACXiE,GAAanD,EACboD,GAAWlD,EACXmD,GAAoB9B,EACpB+B,GAAwBrB,EACxBsB,GAAab,EACbc,GAAUb,EACVc,GAAWb,EAAsCc,YACjDb,GAASc,EACTtC,GAAQuC,EACRC,GAAYC,GA4FhB,ICtGIC,GAAiB7E,EC2BrB,IAAA8E,GAlBA,SAAcxE,EAAKY,EAAGR,GACrB,IAAIqE,EACAxD,EACAD,EAGJ,IADAyD,EAAMzE,EAAImB,IAAK,EAAGP,GACZI,EAAI,EAAGA,EAAIZ,EAAKY,KACrBC,EAAIjB,EAAImB,IAAKH,EAAGJ,IACP6D,IACRA,EAAMxD,GAGR,OAAOwD,GCrBJC,GAAUhF,EACViF,GAAWnE,EACXoE,GAAclE,EACd6D,GAAiBxC,EACjB8C,GAAepC,EACfY,GAASH,EACT4B,GAAgB3B,EAChB4B,GHkCJ,SAAmBC,EAAMC,GACxB,IAAMrB,GAAUqB,GACf,OAAO,IAAIC,UAAW7B,GAAQ,qEAAsE4B,IAErG,GAAKtB,GAAYsB,EAAS,KAAQ,CAEjC,GADAD,EAAK7E,EAAI8E,EAAQ9E,GACX2D,GAAuBkB,EAAK7E,GACjC,OAAO,IAAI+E,UAAW7B,GAAQ,0EAA2E,IAAK2B,EAAK7E,IAEpH,GAAuB,IAAlB6E,EAAK7E,EAAEE,OACX,OAAO,IAAI6E,UAAW7B,GAAQ,qEAAsE,IAAK2B,EAAK7E,IAGhH,GAAKwD,GAAYsB,EAAS,OACzBD,EAAKG,EAAIF,EAAQE,GACXtB,GAAmBmB,EAAKG,IAC7B,OAAO,IAAID,UAAW7B,GAAQ,wEAAyE,IAAK2B,EAAKG,IAGnH,GAAKxB,GAAYsB,EAAS,UACzBD,EAAKI,KAAOH,EAAQG,MACdnB,GAAUe,EAAKI,OAAUvD,GAAOmD,EAAKI,OAC1C,OAAO,IAAIF,UAAW7B,GAAQ,uDAAwD,OAAQ2B,EAAKI,OAGrG,GAAKzB,GAAYsB,EAAS,UACzBD,EAAKK,KAAOJ,EAAQI,MACdpB,GAAUe,EAAKK,OAAUxD,GAAOmD,EAAKK,OAC1C,OAAO,IAAIH,UAAW7B,GAAQ,uDAAwD,OAAQ2B,EAAKK,OAGrG,GAAK1B,GAAYsB,EAAS,UACzBD,EAAKM,KAAOL,EAAQK,MACdrB,GAAUe,EAAKM,OAAUzD,GAAOmD,EAAKM,OAC1C,OAAO,IAAIJ,UAAW7B,GAAQ,uDAAwD,OAAQ2B,EAAKM,OAGrG,GAAK3B,GAAYsB,EAAS,UACzBD,EAAKO,KAAON,EAAQM,MACdtB,GAAUe,EAAKO,OAAU1D,GAAOmD,EAAKO,OAC1C,OAAO,IAAIL,UAAW7B,GAAQ,uDAAwD,OAAQ2B,EAAKO,OAGrG,GAAK5B,GAAYsB,EAAS,UAEzB,GADAD,EAAKxB,OAASyB,EAAQzB,OACjBE,GAAUsB,EAAKxB,SAEnB,GADAwB,EAAKxB,OAASa,GAAWW,EAAKxB,QACzBQ,GAASgB,EAAKxB,QAClB,OAAOwB,EAAKxB,YAEP,IAAMO,GAAYiB,EAAKxB,QAC7B,OAAO,IAAI0B,UAAW7B,GAAQ,6GAA8G,SAAU2B,EAAKxB,SAI7J,OAAO,MGxFJgC,GFaJ,SAAsBvE,EAAGwE,GACxB,IAAMlB,GAAetD,GACpB,MAAM,IAAIiE,UAAW,0CAGtB,IAAMX,GAAekB,GACpB,MAAM,IAAIP,UAAW,2CAGtB,GAAKjE,EAAEZ,SAAWoF,EAAEpF,OACnB,MAAM,IAAIoD,MAAO,oDAGlB,MAAO,CACNtC,IAYD,SAAcH,EAAGJ,GAChB,GAAW,IAANA,EACJ,OAAOK,EAAGD,GAEX,OAAOyE,EAAGzE,IAfVE,MAAS,CAAED,EAAEZ,OAAQ,KE3BnBE,GCAJ,SAAcP,EAAKY,EAAGR,GACrB,IAAIsF,EACAzE,EACAD,EAGJ,IADA0E,EAAS1F,EAAImB,IAAK,EAAGP,GACfI,EAAI,EAAGA,EAAIZ,EAAKY,KACrBC,EAAIjB,EAAImB,IAAKH,EAAGJ,IACP8E,IACRA,EAASzE,GAGX,OAAOyE,GDXJjB,GAAMH,GACNqB,GAAWC,EAwJf,IEhJAC,GFwBA,WACC,IAAIC,EACAC,EAEAC,EACAC,EACAC,EACAb,EACAD,EACAG,EACAD,EACAa,EAIAnB,EACAhF,EACAoG,EACAC,EACAzE,EACA0E,EACAC,EACAC,EACAC,EACAC,EACAC,EACA1F,EACAwE,EACAzE,EACAmE,EACAyB,EAIJ,GAFA5B,EAAO,GAEFH,GAAcgC,UAAU,IAE5B7G,EAAM6G,UAAW,GACjBd,EAAU,MACJ,CAGN,GADAN,EAAIoB,UAAW,IACTtC,GAFNtD,EAAI4F,UAAW,IAGd,MAAM,IAAI3B,UAAW7B,GAAQ,6EAA8EpC,IAE5G,IAAMsD,GAAgBkB,GACrB,MAAM,IAAIP,UAAW7B,GAAQ,8EAA+EoC,IAE7G,GAAKxE,EAAEZ,SAAWoF,EAAEpF,OACnB,MAAM,IAAIoD,MAAO,8EAElBzD,EAAMwF,GAAavE,EAAGwE,GACtBM,EAAU,EAEX,GAAKc,UAAUxG,OAAS0F,IACvBK,EAAMrB,GAAUC,EAAM6B,UAAWd,KAEhC,MAAMK,EAgBR,GAbKpB,EAAK7E,GACTqG,EAAKxB,EAAK7E,EAAE,GACZsG,EAAKzB,EAAK7E,EAAE,KAEZqG,EAAK1B,GAAe9E,EAAK,GACzByG,EAAK3B,GAAe9E,EAAK,IAE1BmF,EAAIH,EAAKG,GAAK,GACdE,EAAOL,EAAKK,MAAQ9E,GAAKP,EAAK,EAAGA,EAAIkB,MAAM,IAC3CkE,EAAOJ,EAAKI,MAAQX,GAAKzE,EAAK,EAAGA,EAAIkB,MAAM,IAC3CqE,EAAOP,EAAKO,MAAQhF,GAAKP,EAAK,EAAGA,EAAIkB,MAAM,IAC3CoE,EAAON,EAAKM,MAAQb,GAAKzE,EAAK,EAAGA,EAAIkB,MAAM,IAEtCmE,GAAQD,EACZ,MAAM,IAAI0B,WAAY,0CAEvB,GAAKvB,GAAQD,EACZ,MAAM,IAAIwB,WAAY,0CAevB,IAZAhB,EAAiBd,EAAKxB,QAAUmC,GAGhCiB,EAAIlC,GAAQ,CACXxD,MAAS,CAAEiE,EAAGA,KAIfc,EAAQtB,GAAUU,EAAMD,EAAMD,GAC9Be,EAAQvB,GAAUY,EAAMD,EAAMH,GAGxBuB,EAAK,EAAGA,EAAKT,EAAM5F,OAAQqG,IAEhC,IADAJ,EAAKL,EAAOS,GACNC,EAAK,EAAGA,EAAKT,EAAM7F,OAAQsG,IAAO,CAGvC,IAFAJ,EAAKL,EAAOS,GACZN,EAAM,EACArF,EAAI,EAAGA,EAAIhB,EAAIkB,MAAO,GAAKF,IAChCmF,EAAOnG,EAAImB,IAAKH,EAAG,GAInBgF,GAHOhG,EAAImB,IAAKH,EAAG,GAGCuF,GAAME,EAI1BJ,GAFS,EAAMG,EAAOV,GAHTK,EAAOG,GAAME,IAIjB,EAAMC,EAAOX,EAAgBE,IAGvCY,EAAEG,IAAKL,EAAIC,EAAIN,EAAMrG,EAAIkB,MAAM,IAOjC,OAHA0D,GADAhD,EAAM,GACY,IAAKqE,GACvBrB,GAAahD,EAAK,IAAKsE,GACvBtB,GAAahD,EAAK,IAAKgF,GAChBhF"}