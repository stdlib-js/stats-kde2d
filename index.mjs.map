{"version":3,"file":"index.mjs","sources":["../lib/iqr.js","../lib/pick_bandwidth.js","../lib/stdev.js","../lib/kernels.js","../lib/validate.js","../lib/get_kernel.js","../lib/ndarray_like.js","../lib/min.js","../lib/max.js","../lib/gaussian.js","../lib/kde2d.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n/**\n* Computes a quantile of the values in a numeric array.\n*\n* @private\n* @param {NumericArray} arr - sorted 1d array\n* @param {Probability} p - quantile prob [0,1]\n* @returns {number} quantile\n*/\nfunction quantile( arr, p ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar h;\n\th = ( ( len - 1.0 ) * p ) + 1.0;\n\tid = floor( h ) - 1.0;\n\treturn arr[ id ] + ( ( h - floor( h ) ) * ( arr[ id + 1 ] - arr[ id ] ) );\n}\n\n\n// MAIN //\n\n/**\n* Computes the inter-quartile range for a numeric array.\n*\n* @private\n* @param {NumericArray} data - ndarray like data\n* @param {number} j - column index for which to get the IQR\n* @returns {number} inter-quartile range\n*/\nfunction iqr( data, j ) {\n\t// Copy and sort data --> build X\n\tvar arr;\n\tvar i;\n\tarr = new Array( data.shape[0] );\n\tfor ( i = 0; i < data.shape[0]; i++ ) {\n\t\tarr[ i ] = data.get( i, j );\n\t}\n\tarr.sort( ascending );\n\treturn quantile( arr, 0.75 ) - quantile( arr, 0.25 );\n}\n\n\n// EXPORTS //\n\nexport default iqr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow' ;\nimport min from '@stdlib/math-base-special-min' ;\nimport EPSILON from '@stdlib/constants-float64-eps' ;\nimport stdev from './stdev.js' ;\nimport iqr from './iqr.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the rule-of-thumb bandwidth for the values in a column of `x`.\n*\n* @private\n* @param {ndarrayLike} arr - input ndarray\n* @param {number} j - index of the column from which to obtain the values\n* @returns {NumericArray} array with bandwidth values\n*\n* @example\n* import ndarrayLike from './ndarray_like.js' ;\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = pickBandwidth( arr, 1 );\n* // returns ~1.717\n*/\nfunction pickBandwidth( arr, j ) {\n\tvar minElement;\n\tvar sigmaHat;\n\tvar powTerm;\n\tvar iqrVal;\n\tvar out;\n\n\tiqrVal = iqr( arr, j ) / 1.34;\n\tsigmaHat = stdev( arr, j );\n\tminElement = min( iqrVal, sigmaHat );\n\tpowTerm = pow( arr.shape[ 0 ], -1/5 );\n\tout = 1.06 * powTerm * minElement;\n\tif ( out === 0 ) {\n\t\tout = EPSILON;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default pickBandwidth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\n\n\n// MAIN //\n\n/**\n* Computes the unbiased standard deviation.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column for which to calculate the standard deviation\n* @returns {number} standard deviation\n*\n* @example\n* import ndarrayLike from './ndarray_like.js' ;\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = stdev( arr, 1 );\n* // returns ~2.568\n*/\nfunction stdev( arr, j ) {\n\tvar delta;\n\tvar mean;\n\tvar M2;\n\tvar i;\n\tvar x;\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\n\tfor ( i = 0; i < arr.shape[0]; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tdelta = x - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn sqrt( M2 / ( i - 1 ) );\n}\n\n\n// EXPORTS //\n\nexport default stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MAIN //\n\nvar kernels = {};\n\n// Make a stdlib/stats/base/kernels package\nkernels[ 'gaussian' ] = require( './gaussian.js' );\nkernels[ 'epanechnikov' ] = require( './epanechnikov.js' );\nkernels[ 'cosine' ] = require( './cosine.js' );\nkernels[ 'quartic' ] = require( './quartic.js' );\nkernels[ 'triangular' ] = require( './triangular.js' );\nkernels[ 'tricube' ] = require( './tricube.js' );\nkernels[ 'triweight' ] = require( './triweight.js' );\nkernels[ 'uniform' ] = require( './uniform.js' );\n\n\n// EXPORTS //\n\nexport default kernels;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isString from '@stdlib/assert-is-string' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer' ;\nimport isPositiveNumberArray from '@stdlib/assert-is-positive-number-array' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport isError from '@stdlib/assert-is-error' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport isnan from '@stdlib/assert-is-nan' ;\nimport getKernel from './get_kernel.js' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.n] - number of splits in the generated grid\n* @param {NumericArray} [options.h] - array of length two indicating the x and y bandwidth values\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.xMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel] - a string or function to specifying the used kernel function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'xMin': 3.14,\n*     'kernel': 'gaussian'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0fg2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'h' ) ) {\n\t\topts.h = options.h;\n\t\tif ( !isPositiveNumberArray( opts.h) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of positive numbers. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t\tif ( opts.h.length !== 2 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of length two. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'n' ) ) {\n\t\topts.n = options.n;\n\t\tif ( !isPositiveInteger( opts.n ) ) {\n\t\t\treturn new TypeError( format( '0fg3b', 'n', opts.n ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMax' ) ) {\n\t\topts.xMax = options.xMax;\n\t\tif ( !isNumber( opts.xMax ) || isnan( opts.xMax ) ) {\n\t\t\treturn new TypeError( format( '0fg8h', 'xMax', opts.xMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMin' ) ) {\n\t\topts.xMin = options.xMin;\n\t\tif ( !isNumber( opts.xMin ) || isnan( opts.xMin ) ) {\n\t\t\treturn new TypeError( format( '0fg8h', 'xMin', opts.xMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMax' ) ) {\n\t\topts.yMax = options.yMax;\n\t\tif ( !isNumber( opts.yMax ) || isnan( opts.yMax ) ) {\n\t\t\treturn new TypeError( format( '0fg8h', 'yMax', opts.yMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMin' ) ) {\n\t\topts.yMin = options.yMin;\n\t\tif ( !isNumber( opts.yMin ) || isnan( opts.yMin ) ) {\n\t\t\treturn new TypeError( format( '0fg8h', 'yMin', opts.yMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'kernel' ) ) {\n\t\topts.kernel = options.kernel;\n\t\tif ( isString( opts.kernel ) ) {\n\t\t\topts.kernel = getKernel( opts.kernel );\n\t\t\tif ( isError( opts.kernel ) ) {\n\t\t\t\treturn opts.kernel;\n\t\t\t}\n\t\t} else if ( !isFunction( opts.kernel ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string denoting a known kernel function or a custom function. Option: `%s`.', 'kernel', opts.kernel ) );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport kernels from './kernels.js' ;\n\n\n// MAIN //\n\n/**\n* Returns the specified kernel function.\n*\n* @private\n* @param {string} name - kernel name\n* @returns {(Function|Error)} kernel function or corresponding error\n*/\nfunction getKernel( name ) {\n\tvar kernel = kernels[ name ];\n\tif ( kernel === void 0 ) {\n\t\treturn new Error( format( '0fgAK', name ) );\n\t}\n\treturn kernel;\n}\n\n\n// EXPORTS //\n\nexport default getKernel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumericArray from '@stdlib/assert-is-numeric-array' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Converts two arrays .\n*\n* @private\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {RangeError} first and second arguments must have the same length\n* @returns {Object} object that mirrors an `ndarray`\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = ndarrayLike( x, y );\n*/\nfunction ndarrayLike( x, y ) {\n\tif ( !isNumericArray(x) ) {\n\t\tthrow new TypeError( format( '0fg8j', x ) );\n\t}\n\n\tif ( !isNumericArray(y) ) {\n\t\tthrow new TypeError( format( '0fgAa', y ) );\n\t}\n\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( '0fg1H' ) );\n\t}\n\n\treturn {\n\t\t'get': get,\n\t\t'shape': [ x.length, 2 ]\n\t};\n\n\t/**\n\t* Gets an element of an nd-array-like object .\n\t*\n\t* @private\n\t* @param {number} i - row index\n\t* @param {number} j - column index\n\t* @returns {number} number stored in row i and column j\n\t*/\n\tfunction get( i, j ) {\n\t\tif ( j === 0 ) {\n\t\t\treturn x[ i ];\n\t\t}\n\t\treturn y[ i ];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ndarrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the range\n* @param {number} len - number of rows in arr\n* @returns {number} minimum value\n*/\nfunction min( arr, j, len ) {\n\tvar minObs;\n\tvar x;\n\tvar i;\n\n\tminObs = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x < minObs ) {\n\t\t\tminObs = x;\n\t\t}\n\t}\n\treturn minObs;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the maximum\n* @param {number} len - number of rows in arr\n* @returns {number} maximum value\n*/\nfunction max( arr, j, len ) {\n\tvar max;\n\tvar x;\n\tvar i;\n\n\tmax = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/assert-is-nan' ;\nimport pow from '@stdlib/math-base-special-pow' ;\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi' ;\nimport exp from '@stdlib/math-base-special-exp' ;\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO_PI = 1.0 / SQRT_TWO_PI;\n\n\n// MAIN //\n\n/**\n* Computes the Gaussian kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} the value for the Gaussian kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = gaussian( u );\n* // returns ~0.0\n*/\nfunction gaussian( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\treturn INV_SQRT_TWO_PI * exp( -0.5 * pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nexport default gaussian;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from '@stdlib/ndarray-array' ;\nimport linspace from '@stdlib/array-base-linspace' ;\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\nimport isNumericArray from '@stdlib/assert-is-numeric-array' ;\nimport isMatrixLike from '@stdlib/assert-is-matrix-like' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport pickBandwidth from './pick_bandwidth.js' ;\nimport validate from './validate.js' ;\nimport ndarrayLike from './ndarray_like.js' ;\nimport min from './min.js' ;\nimport max from './max.js' ;\nimport gaussian from './gaussian.js' ;\n\n\n// MAIN //\n\n/**\n* Computes two-dimensional kernel density estimates.\n*\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @param {Options} [options] - function options\n* @param {NumericArray} [options.h] - array of length two containing the bandwidth values for x and y\n* @param {number} [options.n=25] - number of partitions on the x- and y-axes\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.yMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel='gaussian'] - a string or function to specifying the used kernel function\n* @throws {TypeError} first argument must be an array or matrix-like\n* @throws {TypeError} second argument must be an array\n* @throws {Error} first and second arguments must have the same length\n* @throws {RangeError} `xMin` must be less than `xMax`\n* @throws {RangeError} `yMin` must be less than `yMax`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} object containing the density estimates (`z`) along grid points (`x` and `y` values)\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = kde2d( x, y );\n*/\nfunction kde2d() {\n\tvar kernelFunction;\n\tvar maxArgs;\n\tvar zScoreX;\n\tvar zScoreY;\n\tvar gridX;\n\tvar gridY;\n\tvar xMin;\n\tvar xMax;\n\tvar yMin;\n\tvar yMax;\n\tvar xVal; // For gridspace loop\n\tvar yVal; // For gridspace loop\n\tvar subX;\n\tvar subY;\n\tvar opts;\n\tvar arr;\n\tvar err;\n\tvar ans;\n\tvar out;\n\tvar gx;\n\tvar gy;\n\tvar hX;\n\tvar hY;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\topts = {};\n\n\tif ( isMatrixLike( arguments[0] ) ) {\n\t\t// Case of ndarray, opts\n\t\tarr = arguments[ 0 ];\n\t\tmaxArgs = 1;\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\ty = arguments[ 1 ];\n\t\tif ( !isNumericArray( x ) ) {\n\t\t\tthrow new TypeError( format( '0fg8j', x ) );\n\t\t}\n\t\tif ( !isNumericArray( y ) ) {\n\t\t\tthrow new TypeError( format( '0fgAa', y ) );\n\t\t}\n\t\tif ( x.length !== y.length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. First and second arguments must be arrays having the same length.' );\n\t\t}\n\t\tarr = ndarrayLike( x, y );\n\t\tmaxArgs = 2;\n\t}\n\tif ( arguments.length > maxArgs ) {\n\t\terr = validate( opts, arguments[ maxArgs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.h ) {\n\t\thX = opts.h[0];\n\t\thY = opts.h[1];\n\t} else {\n\t\thX = pickBandwidth( arr, 0 );\n\t\thY = pickBandwidth( arr, 1 );\n\t}\n\tn = opts.n || 25;\n\txMin = opts.xMin || min( arr, 0, arr.shape[0] );\n\txMax = opts.xMax || max( arr, 0, arr.shape[0] );\n\tyMin = opts.yMin || min( arr, 1, arr.shape[0] );\n\tyMax = opts.yMax || max( arr, 1, arr.shape[0] );\n\n\tif ( xMin >= xMax ) {\n\t\tthrow new RangeError( format( 'invalid option. Lower bound `%s` must be strictly less than the upper bound `%s`.', 'xMin', 'xMax' ) );\n\t}\n\tif ( yMin >= yMax ) {\n\t\tthrow new RangeError( format( 'invalid option. Lower bound `%s` must be strictly less than the upper bound `%s`.', 'yMin', 'yMax' ) );\n\t}\n\n\tkernelFunction = opts.kernel || gaussian;\n\n\t// Create the `ndarray` to hold the density values:\n\tz = ndarray({\n\t\t'shape': [ n, n ]\n\t} );\n\n\t// Make the grid:\n\tgridX = linspace( xMin, xMax, n );\n\tgridY = linspace( yMin, yMax, n );\n\n\t// Loop through x and y indices:\n\tfor ( ix = 0; ix < gridX.length; ix++ ) {\n\t\tgx = gridX[ ix ];\n\t\tfor ( iy = 0; iy < gridY.length; iy++ ) {\n\t\t\tgy = gridY[ iy ];\n\t\t\tans = 0.0;\n\t\t\tfor ( i = 0; i < arr.shape[ 0 ]; i++ ) {\n\t\t\t\txVal = arr.get( i, 0 );\n\t\t\t\tyVal = arr.get( i, 1 );\n\n\t\t\t\tzScoreX = ( (xVal - gx) / hX );\n\t\t\t\tzScoreY = ( (yVal - gy) / hY );\n\n\t\t\t\tsubX = ( 1.0 / hX ) * kernelFunction( zScoreX );\n\t\t\t\tsubY = ( 1.0 / hY ) * kernelFunction( zScoreY );\n\t\t\t\tans += ( subX * subY );\n\t\t\t}\n\t\t\tz.set( ix, iy, ans / arr.shape[0] );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'x', gridX );\n\tsetReadOnly( out, 'y', gridY );\n\tsetReadOnly( out, 'z', z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kde2d;\n"],"names":["ascending","a","b","quantile","arr","p","id","h","len","length","floor","pickBandwidth","j","minElement","sigmaHat","iqrVal","out","data","i","Array","shape","get","sort","iqr","delta","mean","M2","x","sqrt","stdev","min","pow","EPSILON","kernels","validate","opts","options","isObject","TypeError","format","hasOwnProp","isPositiveNumberArray","n","isPositiveInteger","xMax","isNumber","isnan","xMin","yMax","yMin","kernel","isString","name","Error","isError","isFunction","ndarrayLike","y","isNumericArray","RangeError","minObs","max","require","INV_SQRT_TWO_PI","SQRT_TWO_PI","gaussian","u","NaN","exp","kde2d","kernelFunction","maxArgs","zScoreY","gridX","gridY","xVal","err","ans","gx","gy","hX","hY","ix","iy","z","isMatrixLike","arguments","ndarray","linspace","set","setReadOnly"],"mappings":"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"}